let shareClasses=[];let transactions=[];let exitAmount=1e7;let summaryChart=null;let exitDistributionChart=null;let shareClassesTableBody;let transactionsTableBody;document.addEventListener("DOMContentLoaded",function(){shareClassesTableBody=document.querySelector("#shareClassesTable tbody");transactionsTableBody=document.querySelector("#transactionsTable tbody");init()});function init(){try{console.log("Initializing application...");shareClasses=[...waterfallCalculator.DEFAULT_SHARE_CLASSES];transactions=[...waterfallCalculator.DEFAULT_TRANSACTIONS];elements={shareClassesTableBody:document.querySelector("#shareClassesTable tbody"),transactionsTableBody:document.querySelector("#transactionsTable tbody"),summaryTableBody:document.querySelector("#summaryTable tbody"),combinedChart:document.getElementById("combinedChart"),exitDistributionChart:document.getElementById("exitDistributionChart"),exitAmountInput:document.getElementById("exitAmount"),addShareClassBtn:document.getElementById("addShareClassBtn"),addTransactionBtn:document.getElementById("addTransactionBtn"),closeModalButtons:document.querySelectorAll(".close-modal, .cancel-modal")};console.log("Elements initialized:",elements);shareClassesTableBody=elements.shareClassesTableBody;transactionsTableBody=elements.transactionsTableBody;setupEventListeners();setupNumericInputs();renderShareClasses();renderTransactions();updateWaterfallAnalysis();window.addEventListener("error",function(event){console.error("Global error caught:",event.error)});console.log("Application initialized successfully")}catch(error){console.error("Error initializing application:",error)}}function setupEventListeners(){document.getElementById("addShareClassBtn").addEventListener("click",function(){addNewShareClassRow()});document.getElementById("addTransactionBtn").addEventListener("click",function(){addNewTransactionRow()});const exitAmountInput=document.getElementById("exitAmount");exitAmountInput.addEventListener("input",function(){const value=parseNumberWithCommas(this.value);updateWaterfallAnalysis()});exitAmountInput.addEventListener("blur",function(){const value=parseNumberWithCommas(this.value);this.value=formatNumberWithCommas(value);updateWaterfallAnalysis()});if(elements.closeModalButtons){elements.closeModalButtons.forEach(button=>{button.addEventListener("click",closeModal)})}}function formatNumberWithCommas(number){return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}function parseNumberWithCommas(str){if(!str)return 0;return parseFloat(str.toString().replace(/,/g,""))||0}function setupNumericInputs(){const numericInputs=document.querySelectorAll('input[type="text"].shares, input[type="text"].investment, #exitAmount');numericInputs.forEach(input=>{input.addEventListener("blur",function(){const value=parseNumberWithCommas(this.value);this.value=formatNumberWithCommas(value)});input.addEventListener("focus",function(){this.value=this.value.replace(/,/g,"")})});document.querySelectorAll("#exitAmount").forEach(input=>{const value=parseNumberWithCommas(input.value);input.value=formatNumberWithCommas(value)});document.addEventListener("DOMNodeInserted",function(e){if(e.target.querySelectorAll){const newInputs=e.target.querySelectorAll('input[type="text"].shares, input[type="text"].investment');newInputs.forEach(input=>{input.addEventListener("blur",function(){const value=parseNumberWithCommas(this.value);this.value=formatNumberWithCommas(value)});input.addEventListener("focus",function(){this.value=this.value.replace(/,/g,"")})})}})}function renderShareClasses(){shareClassesTableBody.innerHTML="";shareClasses.forEach(sc=>{const row=document.createElement("tr");row.dataset.id=sc.id;row.innerHTML=`
            <td><input type="text" class="name" value="${sc.name}" data-field="name" data-id="${sc.id}"></td>
            <td>
                <select class="type" data-field="type" data-id="${sc.id}">
                    <option value="preferred" ${sc.type==="preferred"?"selected":""}>Preferred</option>
                    <option value="common" ${sc.type==="common"?"selected":""}>Common</option>
                </select>
            </td>
            <td><input type="number" class="seniority" min="1" value="${sc.seniority}" data-field="seniority" data-id="${sc.id}"></td>
            <td>
                <input type="number" class="liquidationPref" min="1" step="0.1" value="${sc.liquidationPref}" 
                data-field="liquidationPref" data-id="${sc.id}" 
                style="display: ${sc.type==="preferred"?"block":"none"}">
                <span style="display: ${sc.type==="preferred"?"none":"block"}">-</span>
            </td>
            <td>
                <select class="prefType" data-field="prefType" data-id="${sc.id}" 
                style="display: ${sc.type==="preferred"?"block":"none"}">
                    <option value="non-participating" ${sc.prefType==="non-participating"?"selected":""}>Non-Part.</option>
                    <option value="participating" ${sc.prefType==="participating"?"selected":""}>Part.</option>
                </select>
                <span style="display: ${sc.type==="preferred"?"none":"block"}">-</span>
            </td>
            <td>
                <input type="number" class="cap" min="0" step="0.1" 
                value="${sc.cap||""}" placeholder="No cap"
                data-field="cap" data-id="${sc.id}"
                style="display: ${sc.type==="preferred"&&sc.prefType==="participating"?"block":"none"}">
                <span style="display: ${sc.type==="preferred"&&sc.prefType==="participating"?"none":"block"}">${sc.type==="preferred"&&sc.prefType==="participating"?"":"No Cap"}</span>
            </td>
            <td>
                <button class="delete" data-action="delete" data-id="${sc.id}">Delete</button>
            </td>
        `;const typeSelect=row.querySelector(".type");const prefFields=[row.querySelector(".liquidationPref"),row.querySelector(".prefType")];const prefSpans=[row.querySelector("td:nth-child(4) span"),row.querySelector("td:nth-child(5) span")];const capField=row.querySelector(".cap");const capSpan=row.querySelector("td:nth-child(6) span");typeSelect.addEventListener("change",function(){const isPreferred=this.value==="preferred";prefFields.forEach((field,i)=>{field.style.display=isPreferred?"block":"none";prefSpans[i].style.display=isPreferred?"none":"block"});const isParticipating=row.querySelector(".prefType").value==="participating";capField.style.display=isPreferred&&isParticipating?"block":"none";capSpan.style.display=isPreferred&&isParticipating?"none":"block";capSpan.textContent="No Cap"});row.querySelector(".prefType")?.addEventListener("change",function(){if(typeSelect.value==="preferred"){const isParticipating=this.value==="participating";capField.style.display=isParticipating?"block":"none";capSpan.style.display=isParticipating?"none":"block";capSpan.textContent="No Cap"}});shareClassesTableBody.appendChild(row)});addShareClassEventListeners()}function renderTransactions(){transactionsTableBody.innerHTML="";transactions.forEach(tx=>{const row=document.createElement("tr");row.dataset.id=tx.id;row.innerHTML=`
            <td>
                <select class="shareClass" data-field="shareClass" data-id="${tx.id}">
                    ${shareClasses.map(sc=>`<option value="${sc.name}" ${tx.shareClass===sc.name?"selected":""}>${sc.name}</option>`).join("")}
                </select>
            </td>
            <td>
                <input type="text" class="shares" value="${formatNumberWithCommas(tx.shares)}" 
                data-field="shares" data-id="${tx.id}">
            </td>
            <td>
                <input type="text" class="investment" value="${formatNumberWithCommas(tx.investment)}" 
                data-field="investment" data-id="${tx.id}">
            </td>
            <td>
                <button class="edit" data-action="edit" data-id="${tx.id}">Edit</button>
                <button class="delete" data-action="delete" data-id="${tx.id}">Delete</button>
            </td>
        `;const sharesInput=row.querySelector(".shares");const investmentInput=row.querySelector(".investment");sharesInput.addEventListener("focus",function(){this.value=this.value.replace(/,/g,"")});sharesInput.addEventListener("blur",function(){const value=parseNumberWithCommas(this.value);this.value=formatNumberWithCommas(value)});investmentInput.addEventListener("focus",function(){this.value=this.value.replace(/,/g,"")});investmentInput.addEventListener("blur",function(){const value=parseNumberWithCommas(this.value);this.value=formatNumberWithCommas(value)});transactionsTableBody.appendChild(row)});addTransactionEventListeners()}function createTooltip(text){return`
        <span class="tooltip">
            <span class="tooltip-icon">?</span>
            <span class="tooltip-text">${text}</span>
        </span>
    `}function addTooltipsToShareClassRow(row){const tooltips={seniority:"Determines the order in which share classes receive distributions. Higher numbers have higher priority (3 is higher than 1).",liquidationPref:"Multiplier applied to the original investment that preferred shareholders receive before common shareholders. E.g., 1x means 100% of investment is returned first.",prefType:"Non-participating: Preferred shareholders choose either liquidation preference OR pro-rata share. Participating: Preferred shareholders receive BOTH liquidation preference AND pro-rata share.",cap:"For participating preferred shares, limits the total return as a multiple of the original investment. E.g., 3x cap means maximum return is 3 times the investment."};Object.keys(tooltips).forEach(key=>{const label=row.querySelector(`.${key}-label`);if(label&&!label.querySelector(".tooltip")){label.innerHTML+=createTooltip(tooltips[key])}})}function addNewShareClassRow(){const row=document.createElement("tr");row.className="editing-row";row.innerHTML=`
        <td><input type="text" class="name" placeholder="e.g., Series A"></td>
        <td>
            <select class="type">
                <option value="common">Common</option>
                <option value="preferred">Preferred</option>
            </select>
        </td>
        <td><input type="number" class="seniority" min="1" value="1"></td>
        <td><input type="number" class="liquidationPref preferred-only" min="0" step="0.1" value="1"></td>
        <td>
            <select class="prefType preferred-only">
                <option value="non-participating">Non-Participating</option>
                <option value="participating">Participating</option>
            </select>
        </td>
        <td><input type="number" class="cap preferred-only participating-only hidden" min="0" step="0.1" placeholder="e.g., 3"></td>
        <td class="action-buttons">
            <button class="save" data-action="save">Save</button>
            <button class="cancel" data-action="cancel">Cancel</button>
        </td>
    `;const saveButton=row.querySelector(".save");const cancelButton=row.querySelector(".cancel");saveButton.addEventListener("click",function(){saveShareClass(this)});cancelButton.addEventListener("click",function(){cancelShareClass(this)});const typeSelect=row.querySelector(".type");typeSelect.addEventListener("change",function(){togglePreferredFields(this)});const prefTypeSelect=row.querySelector(".prefType");prefTypeSelect.addEventListener("change",function(){toggleCapField(this)});addTooltipsToShareClassRow(row);togglePreferredFields(row.querySelector(".type"));shareClassesTableBody.appendChild(row)}function saveShareClass(button){const row=button.closest("tr");const name=row.querySelector(".name").value.trim();if(name==="")return;const type=row.querySelector(".type").value;const seniority=parseInt(row.querySelector(".seniority").value)||1;const liquidationPref=type==="preferred"?parseFloat(row.querySelector(".liquidationPref").value)||1:1;const prefType=type==="preferred"?row.querySelector(".prefType").value:"non-participating";const capInput=row.querySelector(".cap").value;const cap=type==="preferred"&&prefType==="participating"&&capInput!==""?parseFloat(capInput):null;const newShareClass={id:shareClasses.length>0?Math.max(...shareClasses.map(sc=>sc.id))+1:1,name:name,type:type,seniority:seniority,liquidationPref:liquidationPref,prefType:prefType,cap:cap};shareClasses.push(newShareClass);renderShareClasses();renderTransactions();updateWaterfallAnalysis()}function cancelShareClass(button){const row=button.closest("tr");row.remove()}function editShareClass(id){const shareClass=shareClasses.find(sc=>sc.id===id);if(!shareClass)return;const modal=document.createElement("div");modal.className="modal";modal.innerHTML=`
        <div class="modal-content">
            <h3>Edit Share Class</h3>
            <div class="form-field">
                <label for="name">Name</label>
                <input type="text" id="name" value="${shareClass.name}">
            </div>
            <div class="form-field">
                <label for="type">Type</label>
                <select id="type">
                    <option value="preferred" ${shareClass.type==="preferred"?"selected":""}>Preferred</option>
                    <option value="common" ${shareClass.type==="common"?"selected":""}>Common</option>
                </select>
            </div>
            <div class="form-field">
                <label for="seniority">Seniority</label>
                <input type="number" id="seniority" min="1" value="${shareClass.seniority}">
            </div>
            <div class="form-field preferred-only ${shareClass.type!=="preferred"?"hidden":""}">
                <label for="liquidationPref">Liquidation Preference</label>
                <input type="number" id="liquidationPref" min="1" step="0.1" value="${shareClass.liquidationPref}">
            </div>
            <div class="form-field preferred-only ${shareClass.type!=="preferred"?"hidden":""}">
                <label for="prefType">Preference Type</label>
                <select id="prefType">
                    <option value="non-participating" ${shareClass.prefType==="non-participating"?"selected":""}>Non-Participating</option>
                    <option value="participating" ${shareClass.prefType==="participating"?"selected":""}>Participating</option>
                </select>
            </div>
            <div class="form-field preferred-only cap-only ${shareClass.type!=="preferred"||shareClass.prefType!=="participating"?"hidden":""}">
                <label for="cap">Cap (x)</label>
                <input type="number" id="cap" min="0" step="0.1" value="${shareClass.cap||""}" placeholder="No cap">
            </div>
            <div class="form-actions">
                <button onclick="updateShareClass(${id})">Save</button>
                <button onclick="closeModal()">Cancel</button>
            </div>
        </div>
    `;document.body.appendChild(modal);const typeSelect=document.getElementById("type");const prefFields=document.querySelectorAll(".preferred-only");const capField=document.querySelector(".cap-only");typeSelect.addEventListener("change",function(){const isPreferred=this.value==="preferred";prefFields.forEach(field=>{field.classList.toggle("hidden",!isPreferred)})});document.getElementById("prefType").addEventListener("change",function(){const isParticipating=this.value==="participating";capField.classList.toggle("hidden",!isParticipating)})}function updateShareClass(id){const shareClass=shareClasses.find(sc=>sc.id===id);if(!shareClass)return;const name=document.getElementById("name").value.trim();if(name==="")return;const type=document.getElementById("type").value;const seniority=parseInt(document.getElementById("seniority").value)||1;const liquidationPref=type==="preferred"?parseFloat(document.getElementById("liquidationPref").value)||1:1;const prefType=type==="preferred"?document.getElementById("prefType").value:"non-participating";const capInput=document.getElementById("cap")?.value;const cap=type==="preferred"&&prefType==="participating"&&capInput!==""?parseFloat(capInput):null;shareClass.name=name;shareClass.type=type;shareClass.seniority=seniority;shareClass.liquidationPref=liquidationPref;shareClass.prefType=prefType;shareClass.cap=cap;const oldName=shareClass.name;transactions.forEach(tx=>{if(tx.shareClass===oldName){tx.shareClass=name}});closeModal();renderShareClasses();renderTransactions();updateWaterfallAnalysis()}function deleteShareClass(id){const shareClass=shareClasses.find(sc=>sc.id===id);if(!shareClass)return;shareClasses=shareClasses.filter(sc=>sc.id!==id);transactions=transactions.filter(tx=>tx.shareClass!==shareClass.name);renderShareClasses();renderTransactions();updateWaterfallAnalysis()}function addNewTransactionRow(){const row=document.createElement("tr");row.className="editing-row";row.innerHTML=`
        <td>
            <select class="shareClass">
                <option value="">Select Share Class</option>
                ${shareClasses.map(sc=>`<option value="${sc.id}">${sc.name}</option>`).join("")}
            </select>
        </td>
        <td><input type="text" class="shares" placeholder="e.g., 1000000"></td>
        <td><input type="text" class="investment" placeholder="e.g., 1000000"></td>
        <td class="action-buttons">
            <button class="save" data-action="save">Save</button>
            <button class="cancel" data-action="cancel">Cancel</button>
        </td>
    `;const saveButton=row.querySelector(".save");const cancelButton=row.querySelector(".cancel");saveButton.addEventListener("click",function(){saveTransaction(this)});cancelButton.addEventListener("click",function(){cancelTransaction(this)});const sharesInput=row.querySelector(".shares");const investmentInput=row.querySelector(".investment");sharesInput.addEventListener("focus",function(){this.value=this.value.replace(/,/g,"")});sharesInput.addEventListener("blur",function(){const value=parseNumberWithCommas(this.value);this.value=formatNumberWithCommas(value)});investmentInput.addEventListener("focus",function(){this.value=this.value.replace(/,/g,"")});investmentInput.addEventListener("blur",function(){const value=parseNumberWithCommas(this.value);this.value=formatNumberWithCommas(value)});transactionsTableBody.appendChild(row)}function saveTransaction(button){const row=button.closest("tr");const shareClass=row.querySelector(".shareClass").value;if(shareClass==="")return;const shares=parseNumberWithCommas(row.querySelector(".shares").value);const investment=parseNumberWithCommas(row.querySelector(".investment").value);const newTransaction={id:transactions.length>0?Math.max(...transactions.map(tx=>tx.id))+1:1,shareClass:shareClass,shares:shares,investment:investment};transactions.push(newTransaction);renderTransactions();updateWaterfallAnalysis()}function cancelTransaction(button){const row=button.closest("tr");row.remove()}function editTransaction(id){const transaction=transactions.find(tx=>tx.id===id);if(!transaction)return;const modal=document.createElement("div");modal.className="modal";modal.innerHTML=`
        <div class="modal-content">
            <h3>Edit Transaction</h3>
            <div class="form-field">
                <label for="shareClass">Share Class</label>
                <select id="shareClass">
                    ${shareClasses.map(sc=>`<option value="${sc.name}" ${transaction.shareClass===sc.name?"selected":""}>${sc.name}</option>`).join("")}
                </select>
            </div>
            <div class="form-field">
                <label for="shares">Shares</label>
                <input type="number" id="shares" min="0" value="${transaction.shares}">
            </div>
            <div class="form-field">
                <label for="investment">Investment ($)</label>
                <input type="number" id="investment" min="0" value="${transaction.investment}">
            </div>
            <div class="form-actions">
                <button onclick="updateTransaction(${id})">Save</button>
                <button onclick="closeModal()">Cancel</button>
            </div>
        </div>
    `;document.body.appendChild(modal)}function updateTransaction(id){const transaction=transactions.find(tx=>tx.id===id);if(!transaction)return;const shareClass=document.getElementById("shareClass").value;if(shareClass==="")return;const shares=parseFloat(document.getElementById("shares").value)||0;const investment=parseFloat(document.getElementById("investment").value)||0;transaction.shareClass=shareClass;transaction.shares=shares;transaction.investment=investment;closeModal();renderTransactions();updateWaterfallAnalysis()}function deleteTransaction(id){transactions=transactions.filter(tx=>tx.id!==id);renderTransactions();updateWaterfallAnalysis()}function closeModal(){const modal=document.querySelector(".modal");if(modal){modal.remove()}}function updateWaterfallAnalysis(){try{console.log("Updating waterfall analysis with exit amount:",exitAmount);const exitAmountInput=document.getElementById("exitAmount");if(exitAmountInput){exitAmount=parseNumberWithCommas(exitAmountInput.value)}const waterfallSteps=waterfallCalculator.calculateDetailedWaterfall(shareClasses,transactions,exitAmount);const summaryData=waterfallCalculator.calculateSummaryWaterfall(shareClasses,transactions,exitAmount);renderSummaryTable(summaryData);renderCombinedChart(summaryData);renderExitDistributionChart();console.log("Waterfall analysis updated successfully")}catch(error){console.error("Error updating waterfall analysis:",error)}}function renderSummaryTable(summaryData){const summaryTableBody=document.querySelector("#summaryTable tbody");summaryTableBody.innerHTML="";summaryData.forEach(result=>{const row=document.createElement("tr");row.innerHTML=`
            <td>${result.name}</td>
            <td>$${result.payout.toLocaleString()}</td>
            <td>${result.percentage}%</td>
        `;summaryTableBody.appendChild(row)});const totalRow=document.createElement("tr");totalRow.className="font-bold";totalRow.innerHTML=`
        <td>Total</td>
        <td>$${exitAmount.toLocaleString()}</td>
        <td>100%</td>
    `;summaryTableBody.appendChild(totalRow)}function renderCombinedChart(summaryData){try{console.log("Rendering combined chart with data:",summaryData);const ctx=document.getElementById("combinedChart");if(!ctx){console.error("Combined chart canvas element not found");return}if(summaryChart){summaryChart.destroy()}const distributionTypes=["Liquidation Preference","Participation","Common Distribution","Additional Distribution","Retained"];const datasets=distributionTypes.map(type=>({label:type,data:summaryData.map(summary=>summary.components[type]||0),backgroundColor:getDistributionTypeColor(type),borderColor:getDistributionTypeColor(type,.8),borderWidth:1})).filter(dataset=>dataset.data.some(value=>value>0));console.log("Chart datasets:",datasets);summaryChart=new Chart(ctx,{type:"bar",data:{labels:summaryData.map(d=>d.name),datasets:datasets},options:{responsive:true,maintainAspectRatio:false,scales:{x:{stacked:true,grid:{display:false}},y:{stacked:true,beginAtZero:true,ticks:{callback:function(value){return"$"+value.toLocaleString()}}}},plugins:{tooltip:{callbacks:{title:function(context){const shareClass=context[0].label;if(shareClass==="Retained by Company")return"Retained by Company";const sc=shareClasses.find(s=>s.name===shareClass);if(!sc)return shareClass;let title=shareClass;if(sc.type==="preferred"){title+=` (${sc.prefType})`;if(sc.prefType==="participating"&&sc.cap){title+=` - ${sc.cap}x cap`}}return title},label:function(context){const value=context.raw;if(value===0)return null;const percentage=(value/exitAmount*100).toFixed(1);return`${context.dataset.label}: $${value.toLocaleString()} (${percentage}%)`},afterBody:function(context){const shareClass=context[0].label;const total=datasets.reduce((sum,dataset)=>sum+(dataset.data[context[0].dataIndex]||0),0);const percentage=(total/exitAmount*100).toFixed(1);return[`Total Payout: $${total.toLocaleString()} (${percentage}%)`]}}},legend:{position:"bottom",labels:{boxWidth:12,padding:15}}}}});console.log("Combined chart rendered successfully")}catch(error){console.error("Error rendering combined chart:",error)}}function renderExitDistributionChart(){try{console.log("Rendering exit distribution chart");const ctx=document.getElementById("exitDistributionChart");if(!ctx){console.error("Exit distribution chart canvas element not found");return}if(exitDistributionChart){exitDistributionChart.destroy()}const maxExit=exitAmount*2;const numPoints=20;const exitDistribution=waterfallCalculator.calculateExitDistribution(shareClasses,transactions,maxExit,numPoints);const activeShareClasses=[...new Set(shareClasses.filter(sc=>transactions.some(tx=>tx.shareClass===sc.name)).map(sc=>sc.name))];const datasets=activeShareClasses.map((className,index)=>{const data=exitDistribution.exitValues.map((_,i)=>{const distribution=exitDistribution.distributions[i];const shareData=distribution.find(d=>d.name===className);return shareData?shareData.payout:0});return{label:className,data:data,fill:false,borderColor:waterfallCalculator.getShareClassColor(className,index),backgroundColor:waterfallCalculator.getShareClassColor(className,index,.1),tension:.4}});exitDistributionChart=new Chart(ctx,{type:"line",data:{labels:exitDistribution.exitValues.map(value=>waterfallCalculator.formatCurrency(value)),datasets:datasets},options:{responsive:true,maintainAspectRatio:false,interaction:{intersect:false,mode:"index"},scales:{x:{title:{display:true,text:"Exit Value"}},y:{beginAtZero:true,title:{display:true,text:"Distribution Amount"},ticks:{callback:value=>waterfallCalculator.formatCurrency(value)}}},plugins:{tooltip:{enabled:true,mode:"index",intersect:false,callbacks:{title:function(tooltipItems){return`Exit Value: ${tooltipItems[0].label}`},label:function(tooltipItem){return`${tooltipItem.dataset.label}: ${waterfallCalculator.formatCurrency(tooltipItem.raw)}`}}}}}});console.log("Exit distribution chart rendered successfully")}catch(error){console.error("Error rendering exit distribution chart:",error)}}function getDistributionTypeColor(type,alpha=1){const colors={"Liquidation Preference":`rgba(59, 130, 246, ${alpha})`,Participation:`rgba(16, 185, 129, ${alpha})`,"Common Distribution":`rgba(107, 114, 128, ${alpha})`,"Additional Distribution":`rgba(168, 85, 247, ${alpha})`,Retained:`rgba(245, 158, 11, ${alpha})`};return colors[type]||`rgba(107, 114, 128, ${alpha})`}window.addNewShareClassRow=addNewShareClassRow;window.editShareClass=editShareClass;window.updateShareClass=updateShareClass;window.deleteShareClass=deleteShareClass;window.addNewTransactionRow=addNewTransactionRow;window.editTransaction=editTransaction;window.updateTransaction=updateTransaction;window.deleteTransaction=deleteTransaction;window.closeModal=closeModal;window.updateShareClassField=function(id,field,value){const shareClass=shareClasses.find(sc=>sc.id===id);if(!shareClass)return;switch(field){case"name":const oldName=shareClass.name;const newName=value.trim();if(newName==="")return;shareClass.name=newName;transactions.forEach(tx=>{if(tx.shareClass===oldName){tx.shareClass=newName}});renderShareClasses();renderTransactions();break;case"type":shareClass.type=value;if(value==="common"){shareClass.liquidationPref=1;shareClass.prefType="non-participating";shareClass.cap=null}break;case"seniority":shareClass.seniority=parseInt(value)||1;break;case"liquidationPref":if(shareClass.type==="preferred"){shareClass.liquidationPref=parseFloat(value)||1}break;case"prefType":if(shareClass.type==="preferred"){shareClass.prefType=value;if(value==="non-participating"){shareClass.cap=null}}break;case"cap":if(shareClass.type==="preferred"&&shareClass.prefType==="participating"){shareClass.cap=value!==""?parseFloat(value):null}break}updateWaterfallAnalysis()};window.updateTransactionField=function(id,field,value){const transaction=transactions.find(tx=>tx.id===id);if(!transaction)return;switch(field){case"shareClass":transaction.shareClass=value;break;case"shares":transaction.shares=typeof value==="string"?parseNumberWithCommas(value):value;break;case"investment":transaction.investment=typeof value==="string"?parseNumberWithCommas(value):value;break}updateWaterfallAnalysis()};window.saveShareClass=saveShareClass;window.cancelShareClass=cancelShareClass;window.saveTransaction=saveTransaction;window.cancelTransaction=cancelTransaction;window.togglePreferredFields=togglePreferredFields;window.toggleCapField=toggleCapField;window.editShareClass=editShareClass;window.updateShareClass=updateShareClass;window.deleteShareClass=deleteShareClass;window.editTransaction=editTransaction;window.updateTransaction=updateTransaction;window.deleteTransaction=deleteTransaction;window.closeModal=closeModal;function togglePreferredFields(selectElement){const row=selectElement.closest("tr");const isPreferred=selectElement.value==="preferred";const preferredFields=row.querySelectorAll(".preferred-only");preferredFields.forEach(field=>{if(isPreferred){field.classList.remove("hidden")}else{field.classList.add("hidden")}});if(isPreferred){const prefTypeSelect=row.querySelector(".prefType");toggleCapField(prefTypeSelect)}}function toggleCapField(selectElement){const row=selectElement.closest("tr");const isParticipating=selectElement.value==="participating";const capField=row.querySelector(".cap");if(isParticipating){capField.classList.remove("hidden")}else{capField.classList.add("hidden")}}function addShareClassEventListeners(){shareClassesTableBody.addEventListener("change",function(event){const target=event.target;const field=target.dataset.field;const id=parseInt(target.dataset.id);if(field&&id){updateShareClassField(id,field,target.value)}});shareClassesTableBody.addEventListener("click",function(event){const target=event.target;if(target.dataset.action==="delete"){const id=parseInt(target.dataset.id);if(id){deleteShareClass(id)}}})}function addTransactionEventListeners(){transactionsTableBody.addEventListener("change",function(event){const target=event.target;const field=target.dataset.field;const id=parseInt(target.dataset.id);if(field&&id){let value=target.value;if(field==="shares"||field==="investment"){value=parseNumberWithCommas(value)}updateTransactionField(id,field,value)}});transactionsTableBody.addEventListener("click",function(event){const target=event.target;const action=target.dataset.action;const id=parseInt(target.dataset.id);if(action&&id){if(action==="delete"){deleteTransaction(id)}else if(action==="edit"){editTransaction(id)}}})}